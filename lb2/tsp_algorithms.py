import heapq
import numpy as np
from math import inf

def reduce_cost_matrix(matrix, verbose=False):
    """–†–µ–¥—É—Ü–∏—Ä—É–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –∑–∞—Ç—Ä–∞—Ç, –≤—ã—á–∏—Ç–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    matrix -- –º–∞—Ç—Ä–∏—Ü–∞ –∑–∞—Ç—Ä–∞—Ç (numpy.ndarray)
    verbose -- —Ñ–ª–∞–≥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (bool, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    reduced_matrix -- —Ä–µ–¥—É—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ (numpy.ndarray)
    total_reduction -- —Å—É–º–º–∞ –≤—Å–µ—Ö –≤—ã—á—Ç–µ–Ω–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤ (float)
    """
    reduced_matrix = matrix.copy()
    row_min = np.min(reduced_matrix, axis=1)
    row_min[np.isinf(row_min)] = 0
    reduced_matrix -= row_min[:, None]
    
    col_min = np.min(reduced_matrix, axis=0)
    col_min[np.isinf(col_min)] = 0
    reduced_matrix -= col_min
    
    if verbose:
        print("=== –†–µ–¥—É–∫—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã ===")
        print(f"–ú–∏–Ω–∏–º—É–º—ã —Å—Ç—Ä–æ–∫: {row_min}")
        print(f"–ú–∏–Ω–∏–º—É–º—ã —Å—Ç–æ–ª–±—Ü–æ–≤: {col_min}")
        print(f"–†–µ–¥—É—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:\n{reduced_matrix}")
    
    return reduced_matrix, np.sum(row_min) + np.sum(col_min)

def minimum_spanning_tree(matrix, vertices, verbose=False):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ—Å—Ç–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ (MST) –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤–µ—Ä—à–∏–Ω.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    matrix -- –º–∞—Ç—Ä–∏—Ü–∞ –∑–∞—Ç—Ä–∞—Ç (numpy.ndarray)
    vertices -- –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω (set)
    verbose -- —Ñ–ª–∞–≥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (bool, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    total_cost -- —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Å—Ç–æ–≤–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ (float)
    """
    if len(vertices) <= 1:
        return 0.0
    total_cost = 0.0
    visited = set()
    start = next(iter(vertices))
    priority_queue = [(0.0, start)]
    
    if verbose:
        print(f"=== –í—ã—á–∏—Å–ª–µ–Ω–∏–µ MST –¥–ª—è –≤–µ—Ä—à–∏–Ω {vertices} ===")
    
    while priority_queue:
        weight, u = heapq.heappop(priority_queue)
        if u in visited:
            continue
        total_cost += weight
        visited.add(u)
        for v in vertices - visited:
            edge_weight = matrix[u][v]
            if edge_weight != inf:
                heapq.heappush(priority_queue, (edge_weight, v))
                if verbose:
                    print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–µ–±—Ä–æ {u} -> {v} —Å –≤–µ—Å–æ–º {edge_weight}")
    
    if verbose:
        print(f"MST –æ—Ü–µ–Ω–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–µ—Ä—à–∏–Ω: {total_cost}")
    
    return total_cost if len(visited) == len(vertices) else inf

def tsp_branch_and_bound(matrix, current, visited, current_cost, path, best, selected_edges, verbose=False):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–µ—Ç–æ–¥ –≤–µ—Ç–≤–µ–π –∏ –≥—Ä–∞–Ω–∏—Ü –¥–ª—è –∑–∞–¥–∞—á–∏ –∫–æ–º–º–∏–≤–æ—è–∂–µ—Ä–∞.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    matrix -- –º–∞—Ç—Ä–∏—Ü–∞ –∑–∞—Ç—Ä–∞—Ç (numpy.ndarray)
    current -- —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ (int)
    visited -- –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ (set)
    current_cost -- —Ç–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—É—Ç–∏ (float)
    path -- —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å (list)
    best -- –ª—É—á—à–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å –∏ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å (dict)
    selected_edges -- –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–±—Ä–∞ (dict)
    verbose -- —Ñ–ª–∞–≥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (bool, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
    """
    num_cities = len(matrix)
    
    if len(visited) == num_cities:
        if matrix[current][0] == inf:
            return
        total_cost = current_cost + matrix[current][0]
        if total_cost < best['cost']:
            best['cost'] = total_cost
            best['path'] = path + [0]
        if verbose:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª–Ω—ã–π –ø—É—Ç—å {path + [0]} —Å –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {total_cost}")
        return

    candidates = [(city, matrix[current][city]) for city in range(num_cities) 
                  if city not in visited and matrix[current][city] != inf]
    candidates.sort(key=lambda x: x[1])

    for next_city, cost_to_next in candidates:
        new_matrix = matrix.copy()
        new_matrix[current, :] = inf  
        new_matrix[:, next_city] = inf  
        
        if len(visited) + 1 < num_cities:
            new_matrix[next_city][0] = inf  

        if current in selected_edges:
            prev_city = selected_edges[current]
            new_matrix[next_city][prev_city] = inf  

        selected_edges[current] = next_city

        reduced_matrix, reduced_cost = reduce_cost_matrix(new_matrix, verbose)
        new_cost = current_cost + cost_to_next + reduced_cost

        remaining_cities = set(range(num_cities)) - visited - {next_city}
        mst_estimate = minimum_spanning_tree(reduced_matrix, remaining_cities, verbose) if remaining_cities else 0

        min_edges_sum = sum(sorted([min(row[row != inf]) for i, row in enumerate(reduced_matrix) if i in remaining_cities])[:2])

        lower_bound = new_cost + min(mst_estimate, min_edges_sum)
        
        if verbose:
            print(f"üîç –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ø—É—Ç—å {path + [next_city]} (—Å—Ç–æ–∏–º–æ—Å—Ç—å: {new_cost}, –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: {lower_bound})")
        
        if lower_bound < best['cost']:
            tsp_branch_and_bound(reduced_matrix, next_city, visited | {next_city}, new_cost, path + [next_city], best, selected_edges.copy(), verbose)

def tsp_little_algorithm(matrix, verbose=False):
    """–†–µ—à–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–æ–º–º–∏–≤–æ—è–∂–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –õ–∏—Ç—Ç–ª–∞.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    matrix -- –º–∞—Ç—Ä–∏—Ü–∞ –∑–∞—Ç—Ä–∞—Ç (numpy.ndarray)
    verbose -- —Ñ–ª–∞–≥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (bool, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    best_solution -- –ª—É—á—à–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å –∏ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å (dict)
    """
    if verbose:
        print("üöÄ –ó–∞–ø—É—Å–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –õ–∏—Ç—Ç–ª–∞...")
    best_solution = {'cost': inf, 'path': []}
    reduced_matrix, initial_cost = reduce_cost_matrix(matrix, verbose)
    tsp_branch_and_bound(reduced_matrix, 0, {0}, initial_cost, [0], best_solution, {}, verbose)
    return best_solution

def tsp_nearest_neighbor(matrix, verbose=False):
    """–†–µ—à–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–æ–º–º–∏–≤–æ—è–∂–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–æ—Å–µ–¥–∞.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    matrix -- –º–∞—Ç—Ä–∏—Ü–∞ –∑–∞—Ç—Ä–∞—Ç (numpy.ndarray)
    verbose -- —Ñ–ª–∞–≥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (bool, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    solution -- –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å –∏ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å (dict)
    """
    num_cities = len(matrix)
    visited = {0}
    path = [0]
    total_cost = 0
    current_city = 0
    while len(visited) < num_cities:
        next_city = min((i for i in range(num_cities) if i not in visited), key=lambda i: matrix[current_city][i], default=None)
        if next_city is None or matrix[current_city][next_city] == inf:
            return {'cost': inf, 'path': []}
        visited.add(next_city)
        path.append(next_city)
        total_cost += matrix[current_city][next_city]
        current_city = next_city
    if matrix[current_city][0] == inf:
        return {'cost': inf, 'path': []}
    path.append(0)
    total_cost += matrix[current_city][0]
    if verbose:
        print(f"üèÅ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—É—Ç—å –Ω–∞–π–¥–µ–Ω: {path}, —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost}")
    return {'cost': total_cost, 'path': path}

def solve_tsp(matrix, method='little', verbose=False):
    """–†–µ—à–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–æ–º–º–∏–≤–æ—è–∂–µ—Ä–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    matrix -- –º–∞—Ç—Ä–∏—Ü–∞ –∑–∞—Ç—Ä–∞—Ç (numpy.ndarray)
    method -- –º–µ—Ç–æ–¥ —Ä–µ—à–µ–Ω–∏—è ('little' –∏–ª–∏ 'nearest_neighbor') (str, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'little')
    verbose -- —Ñ–ª–∞–≥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (bool, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    solution -- –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å –∏ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å (dict)
    """
    return tsp_little_algorithm(matrix, verbose) if method == 'little' else tsp_nearest_neighbor(matrix, verbose)